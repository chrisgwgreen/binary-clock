{"version":3,"file":"iro.min.js","sources":["../src/ui/marker.js","../src/ui/wheel.js","../src/modules/color.js","../src/ui/slider.js","../src/ui/svg.js","../src/modules/stylesheet.js","../src/modules/colorPicker.js","../src/iro.js"],"sourcesContent":["// css class prefix for this element\nvar CLASS_PREFIX = \"iro__marker\";\n\nexport default class marker {\n   /**\n    * @constructor marker UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(svg, opts) {\n    var baseGroup = svg.g({\n      class: CLASS_PREFIX\n    });\n    baseGroup.circle(0, 0, opts.r, {\n      class: CLASS_PREFIX + \"__outer\",\n      fill: \"none\",\n      strokeWidth: 5,\n      stroke: \"#000\",\n    });\n    baseGroup.circle(0, 0, opts.r, {\n      class: CLASS_PREFIX + \"__inner\",\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"#fff\",\n    });\n    this.g = baseGroup;\n  }\n\n  /**\n    * @desc move marker to centerpoint (x, y) and redraw\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n  */\n  move(x, y) {\n    this.g.setTransform(\"translate\", [x, y]);\n  }\n}","import marker from \"ui/marker\";\n\n// css class prefix for this element\nvar CLASS_PREFIX = \"iro__wheel\";\n// Quick references to reused math functions\nvar PI = Math.PI,\n    sqrt = Math.sqrt,\n    abs = Math.abs,\n    round = Math.round;\n\nexport default class wheel {\n  /**\n    * @constructor hue wheel UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(svg, opts) {\n    this._opts = opts;\n    this.type = \"wheel\";\n\n    var cY = opts.cY,\n        cX = opts.cX,\n        r = opts.r,\n        border = opts.border;\n\n    var baseGroup = svg.g({\n      class: CLASS_PREFIX,\n    });\n\n    baseGroup.circle(cX, cY, r + border.w / 2, {\n      class: CLASS_PREFIX + \"__border\",\n      fill: \"#fff\",\n      stroke: border.color,\n      strokeWidth: border.w,\n    });\n\n    var ringGroup = baseGroup.g({\n      class: CLASS_PREFIX + \"__hue\",\n      strokeWidth: r,\n      fill: \"none\",\n    });\n\n    for (var hue = 0; hue < 360; hue++) {\n      ringGroup.arc(cX, cY, r / 2, hue, hue + 1.5, {\n        stroke: \"hsl(\" + (opts.anticlockwise ? 360 - hue : hue) + \",100%,50%)\",\n      });\n    }\n\n    var saturation = baseGroup.circle(cX, cY, r, {\n      class: CLASS_PREFIX + \"__saturation\"\n    });\n\n    saturation.setGradient(\"fill\", svg.gradient(\"radial\", {\n      0: {\n        color: \"#fff\"\n      },\n      100: {\n        color:\"#fff\", \n        opacity: 0\n      },\n    }));\n\n    this._lightness = baseGroup.circle(cX, cY, r, {\n      class: CLASS_PREFIX + \"__lightness\",\n      opacity: 0\n    });\n\n    this.marker = new marker(baseGroup, opts.marker);\n  }\n  /**\n    * @desc updates this element to represent a new color value\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - an object that gives a boolean for each HSV channel, indicating whether ot not that channel has changed\n  */\n  update(color, changes) {\n    var opts = this._opts;\n    var hsv = color.hsv;\n    // If the V channel has changed, redraw the wheel UI with the new value\n    if (changes.v && opts.lightness) {\n      this._lightness.setAttrs({opacity: (1 - hsv.v / 100).toFixed(2) });\n    }\n    // If the H or S channel has changed, move the marker to the right position\n    if (changes.h || changes.s) {\n      // convert the hue value to radians, since we'll use it as an angle\n      var hueAngle = (opts.anticlockwise ? 360 - hsv.h : hsv.h) * (PI / 180);\n      // convert the saturation value to a distance between the center of the ring and the edge\n      var dist = (hsv.s / 100) * opts.rMax;\n      // Move the marker based on the angle and distance\n      this.marker.move(opts.cX + dist * Math.cos(hueAngle), opts.cY + dist * Math.sin(hueAngle));\n    }\n  }\n\n  /**\n    * @desc Takes a point at (x, y) and returns HSV values based on this input -- use this to update a color from mouse input\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Object} - new HSV color values (some channels may be missing)\n  */\n  input(x, y) {\n    var opts = this._opts,\n        rangeMax = opts.rMax,\n        _x = opts.cX - x,\n        _y = opts.cY - y;\n\n    var angle = Math.atan2(_y, _x),\n        // Calculate the hue by converting the angle to radians\n        hue = round(angle * (180 / PI)) + 180,\n        // Find the point's distance from the center of the wheel\n        // This is used to show the saturation level\n        dist = Math.min(sqrt(_x * _x + _y * _y), rangeMax);\n    \n    hue = (opts.anticlockwise ? 360 - hue : hue);\n\n    // Return just the H and S channels, the wheel element doesn't do anything with the L channel\n    return {\n      h: hue,\n      s: round((100 / rangeMax) * dist)\n    };\n  }\n\n  /**\n    * @desc Check if a point at (x, y) is inside this element\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Boolean} - true if the point is a \"hit\", else false\n  */\n  checkHit(x, y) {\n    var opts = this._opts;\n\n    // Check if the point is within the hue ring by comparing the point's distance from the centre to the ring's radius\n    // If the distance is smaller than the radius, then we have a hit\n    var dx = abs(x - opts.cX),\n        dy = abs(y - opts.cY);\n    return sqrt(dx * dx + dy * dy) < opts.r;\n  }\n}","var round = Math.round;\nvar floor = Math.floor;\n\n/**\n  * @desc convert object / string input to color if necessary\n  * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  * @return {color} color instance\n*/\nfunction getColor(value) {\n  return value instanceof color ? value : new color(value);\n};\n\n/**\n  * @desc clamp value between min and max\n  * @param {Number} value\n  * @param {Number} min\n  * @param {Number} max\n  * @return {Number}\n*/\nfunction clamp(value, min, max) {\n  return value <= min ? min : value >= max ? max : value;\n};\n\n/**\n  * @desc compare values between two objects, returns a object representing changes with true/false values\n  * @param {Object} a\n  * @param {Object} b\n  * @return {Object}\n*/\nfunction compareObjs(a, b) {\n  var changes = {};\n  for (var key in a) changes[key] = b[key] != a[key];\n  return changes;\n};\n\nexport default class color {\n  /**\n    * @constructor color object\n    * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  constructor(value) {\n    // The watch callback function for this color will be stored here\n    this._onChange = false;\n    // The default color value\n    this._value = {h: undefined, s: undefined, v: undefined};\n    if (value) this.set(value);\n  }\n\n  /**\n    * @desc mix two colors\n    * @param {Object | String | color} color1 - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Object | String | color} color2 - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} weight - closer to 0 = more color1, closer to 100 = more color2\n    * @return {color} color instance\n  */\n  static mix(color1, color2, weight) {\n    var rgb1 = getColor(color1).rgb,\n        rgb2 = getColor(color2).rgb;\n    weight = clamp((weight / 100 || 0.5), 0, 1);\n    return new color({\n      r: floor(rgb1.r + (rgb2.r - rgb1.r) * weight),\n      g: floor(rgb1.g + (rgb2.g - rgb1.g) * weight),\n      b: floor(rgb1.b + (rgb2.b - rgb1.b) * weight),\n    });\n  }\n\n  /**\n    * @desc lighten color by amount\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} amount\n    * @return {color} color instance\n  */\n  static lighten(color, amount) {\n    var col = getColor(color),\n        hsv = col.hsv;\n    hsv.v = clamp(hsv.v + amount, 0, 100);\n    col.hsv = hsv;\n    return col;\n  }\n\n  /**\n    * @desc darken color by amount\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} amount\n    * @return {color} color instance\n  */\n  static darken(color, amount) {\n    var col = getColor(color),\n        hsv = col.hsv;\n    hsv.v = clamp(hsv.v - amount, 0, 100);\n    col.hsv = hsv;\n    return col;\n  }\n\n  /**\n    * @desc convert hsv object to rgb\n    * @param {Object} hsv - hsv object\n    * @return {Object} rgb object\n  */\n  static hsv2Rgb(hsv) {\n    var r, g, b, i, f, p, q, t;\n    var h = hsv.h/360, s = hsv.s/100, v = hsv.v/100;\n    i = floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n      case 0: r = v, g = t, b = p; break;\n      case 1: r = q, g = v, b = p; break;\n      case 2: r = p, g = v, b = t; break;\n      case 3: r = p, g = q, b = v; break;\n      case 4: r = t, g = p, b = v; break;\n      case 5: r = v, g = p, b = q; break;\n    }\n    return {r: round(r * 255), g: round(g * 255), b: round(b * 255)};\n  }\n\n  /**\n    * @desc convert rgb object to hsv\n    * @param {Object} rgb - rgb object\n    * @return {Object} hsv object\n  */\n  static rgb2Hsv(rgb) {\n    // Modified from https://github.com/bgrins/TinyColor/blob/master/tinycolor.js#L446\n    var r = rgb.r / 255,\n        g = rgb.g / 255,\n        b = rgb.b / 255,\n        max = Math.max(r, g, b),\n        min = Math.min(r, g, b),\n        delta = max - min,\n        hue;\n    switch (max) {\n      case min: hue = 0; break;\n      case r: hue = (g - b) / delta + (g < b ? 6 : 0); break;\n      case g: hue = (b - r) / delta + 2; break;\n      case b: hue = (r - g) / delta + 4; break;\n    }\n    hue /= 6;\n    return {\n      h: hue * 360,\n      s: max == 0 ? 0 : (delta / max) * 100,\n      v: max * 100\n    };\n  }\n\n  /**\n    * @desc convert hsv object to hsl\n    * @param {Object} hsv - hsv object\n    * @return {Object} hsl object\n  */\n  static hsv2Hsl(hsv) {\n    var s = hsv.s / 100,\n        v = hsv.v / 100;\n    var l = 0.5 * v * (2 - s);\n    s = v * s / (1 - Math.abs(2 * l - 1));\n    return {\n      h: hsv.h,\n      s: s * 100 || 0,\n      l: l * 100\n    };\n  }\n\n  /**\n    * @desc convert hsl object to hsv\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsv object\n  */\n  static hsl2Hsv(hsl) {\n    var s = hsl.s / 100,\n    l = hsl.l / 100;\n    l *= 2;\n    s *= (l <= 1) ? l : 2 - l;\n    return {\n      h: hsl.h,\n      s: ((2 * s) / (l + s)) * 100,\n      v: ((l + s) / 2) * 100\n    };\n  }\n\n  /**\n    * @desc convert hsl object to string\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsl string\n  */\n  static hsl2Str(hsl) {\n    return \"hsl\" + (hsl.a ? \"a\" : \"\") + \"(\" + hsl.h + \", \" + hsl.s + \"%, \" + hsl.l + \"%\" + (hsl.a ? \", \" + hsl.a : \"\") + \")\";\n  }\n\n  /**\n    * @desc convert rgb object to string\n    * @param {Object} rgb - rgb object\n    * @return {Object} rgb string\n  */\n  static rgb2Str(rgb) {\n    return \"rgb\" + (rgb.a ? \"a\" : \"\") + \"(\" + rgb.r + \", \" + rgb.g + \", \" + rgb.b + (rgb.a ? \", \" + rgb.a : \"\") + \")\";\n  }\n\n  /**\n    * @desc convert rgb object to hex string\n    * @param {Object} rgb - rgb object\n    * @return {Object} hex string\n  */\n  static rgb2Hex(rgb) {\n    var str = \"#\";\n    str += rgb.r.toString(16).padStart(2, \"0\");\n    str += rgb.g.toString(16).padStart(2, \"0\");\n    str += rgb.b.toString(16).padStart(2, \"0\");\n    return str;\n  }\n\n  /**\n    * @desc parse hex string\n    * @param {String} str - color string\n    * @return {Object} rgb object\n  */\n  static parseHexStr(hex) {\n    // Strip any \"#\" characters\n    hex = hex.replace(\"#\", \"\");\n    // Prefix the hex string with \"0x\" which indicates a number in hex notation, then convert to an integer\n    var int = parseInt(\"0x\" + hex),\n        // If the length of the input is only 3, then it is a shorthand hex color\n        isShorthand = hex.length == 3,\n        // bitMask for isolating each channel\n        bitMask = isShorthand ? 0xF : 0xFF,\n        // bitLength of each channel (for example, F is 4 bits long while FF is 8 bits long)\n        bitLength = isShorthand ? 4 : 8,\n        // If we're using shorthand notation, multiply each channel by 17\n        multiplier = isShorthand ? 17 : 1;\n    return {\n      r: ((int >> (bitLength * 2)) & bitMask) * multiplier,\n      g: ((int >> bitLength) & bitMask) * multiplier,\n      b: (int & bitMask) * multiplier,\n    };\n  }\n\n  get hsv() {\n    // _value is cloned to allow changes to be made to the values before passing them back\n    var v = this._value;\n    return {h: v.h, s: v.s, v: v.v};\n  }\n\n  set hsv(newValue) {\n    // If this color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this._onChange) {\n      var oldValue = this._value;\n      for (var channel in oldValue) {\n        if (!newValue.hasOwnProperty(channel)) newValue[channel] = oldValue[channel];\n      }\n      var changes = compareObjs(oldValue, newValue);\n      // Update the old value\n      this._value = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v) this._onChange(this, changes);\n    } else {\n      this._value = newValue;\n    }\n  }\n\n  get rgb() {\n    var rgb = color.hsv2Rgb(this._value);\n    return {\n      r: round(rgb.r),\n      g: round(rgb.g),\n      b: round(rgb.b),\n    };\n  }\n\n  set rgb(value) {\n    this.hsv = color.rgb2Hsv(value);\n  }\n\n  get hsl() {\n    var hsl = color.hsv2Hsl(this._value);\n    return {\n      h: round(hsl.h),\n      s: round(hsl.s),\n      l: round(hsl.l),\n    };\n  }\n\n  set hsl(value) {\n    this.hsv = color.hsl2Hsv(value);\n  }\n\n  get rgbString() {\n    return color.rgb2Str(this.rgb);\n  }\n\n  get hexString() {\n    return color.rgb2Hex(this.rgb);\n  }\n\n  set hexString(value) {\n    this.rgb = color.parseHexStr(value);\n  }\n\n  get hslString() {\n    return color.hsl2Str(this.hsl);\n  }\n\n\n\n  /**\n    * @desc set the color from any valid value\n    * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  set(value) {\n    if (typeof value == \"object\") {\n      if (value instanceof color) {\n        this.hsv = color.hsv;\n      } else if (\"r\" in value) {\n        this.rgb = value;\n      } else if (\"v\" in value) {\n        this.hsv = value;\n      } else if (\"l\" in value) {\n        this.hsl = value;\n      }\n    } else if (typeof value == \"string\") {\n      if (/^rgb/.test(value)) {\n        this.rgbString = value;\n      } else if (/^hsl/.test(value)) {\n        this.hslString = value;\n      } else if (/^#[0-9A-Fa-f]/.test(value)) {\n        this.hexString = value;\n      }\n    }\n  }\n\n  /**\n    * @desc shortcut to set a specific channel value\n    * @param {String} model - hsv | hsl | rgb\n    * @param {String} channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param {Number} value - new value for the channel\n  */\n  setChannel(model, channel, value) {\n    var v = this[model];\n    v[channel] = value;\n    this[model] = v;\n  }\n\n  /**\n    * @desc make new color instance with the same value as this one\n    * @return {color}\n  */\n  clone() {\n    return new color(this);\n  }\n\n  /**\n    * @desc compare this color against another, returns a object representing changes with true/false values\n    * @param {Object | String | color} color - color to compare against\n    * @param {String} model - hsv | hsl | rgb\n    * @return {Object}\n  */\n  compare(color, model) {\n    model = model || \"hsv\";\n    return compareObjs(this[model], getColor(color)[model]);\n  }\n\n  /**\n    * @desc mix a color into this one\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} weight - closer to 0 = more current color, closer to 100 = more new color\n  */\n  mix(color, weight) {\n    this.hsv = mix(this, color, weight).hsv;\n  }\n\n  /**\n    * @desc lighten color by amount\n    * @param {Number} amount\n  */\n  lighten(amount) {\n    lighten(this, amount);\n  }\n\n  /**\n    * @desc darken color by amount\n    * @param {Number} amount\n  */\n  darken(amount) {\n    darken(this, amount);\n  }\n}","import marker from \"ui/marker\";\nimport iroColor from \"modules/color\";\n\n// css class prefix for this element\nvar CLASS_PREFIX = \"iro__slider\";\n\nexport default class slider {\n  /**\n    * @constructor slider UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(svg, opts) {\n    var r = opts.r,\n    w = opts.w,\n    h = opts.h,\n    x = opts.x,\n    y = opts.y,\n    borderWidth = opts.border.w;\n  \n    // \"range\" limits how far the slider's marker can travel, and where it stops and starts along the X axis\n    opts.range = {\n      min: x + r,\n      max: (x + w) - r,\n      w: w - (r * 2)\n    };\n  \n    opts.sliderType = opts.sliderType || \"v\";\n  \n    this.type = \"slider\";\n    this._opts = opts;\n  \n    var radius = r + borderWidth / 2;\n  \n    var baseGroup = svg.g({\n      class: CLASS_PREFIX,\n    });\n  \n    var rect = baseGroup.insert(\"rect\", {\n      class: CLASS_PREFIX + \"__value\",\n      rx: radius,\n      ry: radius,\n      x: x - borderWidth / 2,\n      y: y - borderWidth / 2,\n      width: w + borderWidth,\n      height: h + borderWidth,\n      strokeWidth: borderWidth,\n      stroke: opts.border.color,\n    });\n  \n    rect.setGradient(\"fill\", svg.gradient(\"linear\", {\n      0: {color: \"#000\"},\n      100: {color: \"#fff\"}\n    }));\n  \n    this._gradient = rect.gradient;\n  \n    this.marker = new marker(baseGroup, opts.marker);\n  }\n  /**\n    * @desc updates this element to represent a new color value\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - an object that gives a boolean for each HSV channel, indicating whether ot not that channel has changed\n  */\n  update(color, changes) {\n    var opts = this._opts;\n    var range = opts.range;\n    var hsv = color.hsv;\n    var hsl = iroColor.hsv2Hsl({h: hsv.h, s: hsv.s, v: 100});\n    if (opts.sliderType == \"v\") {\n      if (changes.h || changes.s) {\n        this._gradient.stops[1].setAttrs({stopColor: \"hsl(\" + hsl.h + \",\" + hsl.s + \"%,\" + hsl.l + \"%)\"});\n      }\n      if (changes.v) {\n        var percent = (hsv.v / 100);\n        this.marker.move(range.min + (percent * range.w), opts.y + (opts.h / 2));\n      }\n    }\n  }\n\n  /**\n    * @desc Takes a point at (x, y) and returns HSV values based on this input -- use this to update a color from mouse input\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Object} - new HSV color values (some channels may be missing)\n  */\n  input(x, y) {\n    var opts = this._opts;\n    var range = opts.range;\n    var dist = Math.max(Math.min(x, range.max), range.min) - range.min;\n    return {\n      v: Math.round((100 / range.w) * dist),\n    };\n  }\n\n  /**\n    * @desc Check if a point at (x, y) is inside this element\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Boolean} - true if the point is a \"hit\", else false\n  */\n  checkHit(x, y) {\n    var opts = this._opts;\n    return (x > opts.x) && (x < opts.x + opts.w) && (y > opts.y) && (y < opts.y + opts.h);\n  }\n\n}","var GRADIENT_INDEX = 0;\nvar GRADIENT_SUFFIX = \"Gradient\";\nvar SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nvar SVG_ATTRIBUTE_SHORTHANDS = {\n  class: \"class\",\n  stroke: \"stroke\",\n  strokeWidth: \"stroke-width\",\n  fill: \"fill\",\n  opacity: \"opacity\",\n  offset: \"offset\",\n  stopColor: \"stop-color\",\n  stopOpacity: \"stop-opacity\",\n};\n// TODO: figure out why these aren't being compressed properly?\nvar SVG_TRANSFORM_SHORTHANDS = {\n  translate: \"setTranslate\",\n  scale: \"setScale\",\n  rotate: \"setRotate\"\n};\n// sniff useragent string to check if the user is running IE, Edge or Safari\nvar ua = window.navigator.userAgent.toLowerCase();\nvar IS_IE = /msie|trident|edge/.test(ua);\nvar IS_SAFARI = /^((?!chrome|android).)*safari/i.test(ua);\n\nclass svgElement {\n  /**\n    * @constructor svg element wrapper\n    * @param {svgRoot} root - svgRoot object\n    * @param {svgElement | Element} parent - parent node \n    * @param {String} type - element tag name\n    * @param {Object} attrs - element attributes\n  */\n  constructor(root, parent, type, attrs) {\n    var el = document.createElementNS(SVG_NAMESPACE, type);\n    this.el = el;\n    this.setAttrs(attrs);\n    (parent.el || parent).appendChild(el);\n    this._root = root;\n    this._svgTransforms = {};\n    this._transformList = el.transform ? el.transform.baseVal : false;\n  }\n\n  /**\n    * @desc insert a new svgElement\n    * @param {String} type - element tag name\n    * @param {Object} attrs - element attributes\n  */\n  insert(type, attrs) {\n    return new svgElement(this._root, this, type, attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new group svgElement\n    * @param {Object} attrs - element attributes\n  */\n  g(attrs) {\n    return this.insert(\"g\", attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new arc svgElement\n    * @param {Number} cx - arc center x\n    * @param {Number} cy - arc center y\n    * @param {Number} radius - arc radius\n    * @param {Number} startAngle - arc start angle (in degrees)\n    * @param {Number} endAngle - arc end angle (in degrees)\n    * @param {Object} attrs - element attributes\n  */\n  arc(cx, cy, radius, startAngle, endAngle, attrs) {\n    var largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    startAngle *= Math.PI / 180;\n    endAngle *= Math.PI / 180;\n    var x1 = cx + radius * Math.cos(endAngle),\n        y1 = cy + radius * Math.sin(endAngle),\n        x2 = cx + radius * Math.cos(startAngle),\n        y2 = cy + radius * Math.sin(startAngle);\n    attrs = attrs || {};\n    attrs.d = [\"M\", x1, y1, \"A\", radius, radius, 0, largeArcFlag, 0, x2, y2].join(\" \");\n    return this.insert(\"path\", attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new circle svgElement\n    * @param {Number} cx - circle center x\n    * @param {Number} cy - circle center y\n    * @param {Number} radius - circle radius\n    * @param {Object} attrs - element attributes\n  */\n  circle(cx, cy, radius, attrs) {\n    attrs = attrs || {};\n    attrs.cx = cx;\n    attrs.cy = cy;\n    attrs.r = radius;\n    return this.insert(\"circle\", attrs);\n  }\n\n  /**\n    * @desc set a rotate/translate/scale transform on this element\n    * @param {String} type - transform (rotate | translate | scale)\n    * @param {Array} args - transform values\n  */\n  setTransform(type, args) {\n    if (!IS_IE) {  \n      var transform, transformFn;\n      var svgTransforms = this._svgTransforms;\n      if (!svgTransforms[type]) {\n        transform = this._root.el.createSVGTransform();\n        svgTransforms[type] = transform;\n        this._transformList.appendItem(transform);\n      } else {\n        transform = svgTransforms[type];\n      }\n      transformFn = (type in SVG_TRANSFORM_SHORTHANDS) ? SVG_TRANSFORM_SHORTHANDS[type] : type;\n      transform[transformFn].apply(transform, args);\n    } else {\n      // Microsoft still can't make a web browser that actually works, as such, Edge + IE dont implement SVG transforms properly.\n      // We have to force them instead... geez\n      this.setAttrs({\"transform\": type + \"(\" + args.join(\", \") + \")\"});\n    }\n  }\n\n  /**\n    * @desc set attributes on this element\n    * @param {Object} attrs - element attributes\n  */\n  setAttrs(attrs) {\n    for (var attr in attrs) {\n      var name = (attr in SVG_ATTRIBUTE_SHORTHANDS) ? SVG_ATTRIBUTE_SHORTHANDS[attr] : attr;\n      this.el.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  setGradient(attr, gradient) {\n    var attrs = {};\n    attrs[attr] = gradient.getUrl();\n    gradient._refs[attr] = this;\n    this.gradient = gradient;\n    this.setAttrs(attrs);\n  }\n}\n\n\nclass svgGradient {\n  /**\n    * @constructor svg gradient wrapper\n    * @param {svgRoot} root - svgRoot object\n    * @param {String} type - gradient type (linear | radial)\n    * @param {Object} stops - gradient stops = {color, opacity} keyed by offset value\n  */\n  constructor(root, type, stops) {\n    var stopElements = [];\n    var gradient = root._defs.insert(type + GRADIENT_SUFFIX, {\n      id: \"iro\" + GRADIENT_SUFFIX + (GRADIENT_INDEX++)\n    });\n    for (var offset in stops) {\n      var stop = stops[offset];\n      stopElements.push(gradient.insert(\"stop\", {\n        offset: offset + \"%\",\n        stopColor: stop.color,\n        stopOpacity: stop.opacity === undefined ? 1 : stop.opacity,\n      }));\n    }\n    this.el = gradient.el;\n    this.stops = stopElements;\n    this._refs = {};\n  }\n\n  getUrl(base) {\n    var root = IS_SAFARI ? (base || location.protocol + \"//\" + location.host + location.pathname) : \"\";\n    return \"url(\" + root + \"#\" + this.el.id + \")\";\n  }\n}\n\nexport default class svgRoot extends svgElement {\n  /**\n    * @constructor svg root element (inherits svgElement)\n    * @param {svgElement | Element} parent - parent node \n    * @param {Number} width - svg width\n    * @param {Number} height - svg height\n  */\n  constructor(parent, width, height, display) {\n    super(null, parent, \"svg\", {\n      width, \n      height, \n      style: \"display:\" + (display || \"block\") + \";touch-action:none\"\n    });\n    this._root = this;\n    this._defs = this.insert(\"defs\");\n    this._gradients = [];\n  }\n\n  gradient(type, stops) {\n    var gradient = new svgGradient(this, type, stops);\n    this._gradients.push(gradient);\n    return gradient;\n  }\n\n  updateUrls(base) {\n    if (IS_SAFARI) {\n      var gradients = this._gradients;\n      for (var i = 0; i < gradients.length; i++) {\n        for (var key in gradients[i]._refs) {\n          var attrs = {};\n          attrs[key] = gradients[i].getUrl(base);\n          gradients[i]._refs[key].setAttrs(attrs);\n        }\n      }\n    }\n  }\n}","\nexport default class stylesheet {\n  /**\n    @constructor stylesheet writer\n  */\n  constructor() {\n    // Create a new style element\n    let style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    // Webkit apparently requires a text node to be inserted into the style element\n    // (according to https://davidwalsh.name/add-rules-stylesheets)\n    style.appendChild(document.createTextNode(\"\"));\n    this.style = style;\n    // Create a reference to the style element's CSSStyleSheet object\n    // CSSStyleSheet API: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet\n    let sheet = style.sheet;\n    this.sheet = sheet;\n    // Get a reference to the sheet's CSSRuleList object\n    // CSSRuleList API: https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList\n    this.rules = sheet.rules || sheet.cssRules;\n    // We'll store references to all the CSSStyleDeclaration objects that we change here, keyed by the CSS selector they belong to\n    // CSSStyleDeclaration API: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n    this.map = {};\n  }\n\n  get enabled() {\n    return !this.sheet.disabled;\n  }\n\n  set enabled(value) {\n    this.sheet.disabled = !value;\n  }\n  \n  get css() {\n    var map = this.map;\n    var ret = {};\n    for (var selector in map) {\n      var ruleSet = map[selector];\n      ret[selector] = {};\n      for (var i = 0; i < ruleSet.length; i++) {\n        var property = ruleSet[i];\n        ret[selector][property] = ruleSet.getPropertyValue(property);\n      }\n    }\n    return ret;\n  }\n\n  /**\n    * @desc Set a specific rule for a given selector\n    * @param {String} selector - the CSS selector for this rule (e.g. \"body\", \".class\", \"#id\")\n    * @param {String} property - the CSS property to set (e.g. \"background-color\", \"font-family\", \"z-index\")\n    * @param {String} value    - the new value for the rule (e.g. \"rgb(255, 255, 255)\", \"Helvetica\", \"99\")\n  */\n  setRule(selector, property, value) {\n    var sheet = this.sheet;\n    var rules = sheet.rules || sheet.cssRules;\n    var map = this.map;\n    // Convert property from camelCase to snake-case\n    property = property.replace(/([A-Z])/g, function($1) {\n      return \"-\" + $1.toLowerCase();\n    });\n    if (!map.hasOwnProperty(selector)) {\n      // If the selector hasn't been used yet we want to insert the rule at the end of the CSSRuleList, so we use its length as the index value\n      var index = rules.length;\n      // Prepare the rule declaration text, since both insertRule and addRule take this format\n      var declaration = property + \": \" + value;\n      // Insert the new rule into the stylesheet\n      try {\n        // Some browsers only support insertRule, others only support addRule, so we have to use both\n        sheet.insertRule(selector + \" {\" + declaration + \";}\", index);\n      } catch(e) {\n        sheet.addRule(selector, declaration, index);\n      } finally {\n        // Because safari is perhaps the worst browser in all of history, we have to remind it to keep the sheet rules up-to-date\n        rules = sheet.rules || sheet.cssRules;\n        // Add our newly inserted rule's CSSStyleDeclaration object to the internal map\n        map[selector] = rules[index].style;\n      }\n    }\n    else {\n      map[selector].setProperty(property, value);\n    }\n  }\n}","import wheel from \"ui/wheel\";\nimport slider from \"ui/slider\";\nimport svg from \"ui/svg\";\nimport iroColor from \"modules/color\";\nimport iroStyleSheet from \"modules/stylesheet\";\n\nconst EVENT_MOUSEDOWN = \"mousedown\",\n      EVENT_MOUSEMOVE = \"mousemove\",\n      EVENT_MOUSEUP = \"mouseup\",\n      EVENT_TOUCHSTART = \"touchstart\",\n      EVENT_TOUCHMOVE = \"touchmove\",\n      EVENT_TOUCHEND = \"touchend\",\n      EVENT_READYSTATE_CHANGE = \"readystatechange\",\n      READYSTATE_COMPLETE = \"complete\";\n\n/**\n  * @desc listen to one or more events on an element\n  * @param {Element} el target element\n  * @param {Array} eventList the events to listen to\n  * @param {Function} callback the event callback function\n  * @param {Object} params params to pass to addEventListener\n*/\nfunction listen(el, eventList, callback, params={}) {\n  for (var i = 0; i < eventList.length; i++) {\n    el.addEventListener(eventList[i], callback, params);\n  }\n};\n\n/**\n  * @desc remove an event listener on an element\n  * @param {Element} el target element\n  * @param {Array} eventList the events to remove\n  * @param {Function} callback the event callback function\n*/\nfunction unlisten(el, eventList, callback) {\n  for (var i = 0; i < eventList.length; i++) {\n    el.removeEventListener(eventList[i], callback);\n  }\n};\n\n/**\n  * @desc call fn callback when the page document is ready\n  * @param {Function} callback callback function to be called\n*/\nfunction whenReady(callback) {\n  if (document.readyState == READYSTATE_COMPLETE) {\n    callback();\n  }\n  else {\n    listen(document, [EVENT_READYSTATE_CHANGE], function stateChange(e) {\n      if (document.readyState == READYSTATE_COMPLETE) {\n        callback();\n        unlisten(document, [EVENT_READYSTATE_CHANGE], stateChange);\n      }\n    });\n  }\n};\n\n\nexport default class colorPicker {\n  /**\n    * @constructor color wheel object\n    * @param {Element | String} el - a DOM element or the CSS selector for a DOM element to use as a container for the UI\n    * @param {Object} opts - options for this instance\n  */\n  constructor(el, opts) {\n    opts = opts || {};\n    // event storage for `on` and `off`\n    this._events = {};\n    this._mouseTarget = false;\n    this._colorChangeActive = false;\n    this.css = opts.css || opts.styles || undefined;\n    // Wait for the document to be ready, then mount the UI\n    whenReady(() => {this._mount(el, opts)});\n  }\n  /**\n    * @desc mount the color picker UI into the DOM\n    * @param {Element | String} el - a DOM element or the CSS selector for a DOM element to use as a container for the UI\n    * @param {Object} opts - options for this instance\n    * @access protected\n  */\n  _mount(el, opts) {\n    // If `el` is a string, use it to select an Element, else assume it's an element\n    el = (\"string\" == typeof el) ? document.querySelector(el) : el;\n    // Find the width and height for the UI\n    // If not defined in the options, try the HTML width + height attributes of the wrapper, else default to 320\n    var elWidth = parseInt(getComputedStyle(el).width);\n    var elHeight = parseInt(getComputedStyle(el).height);\n    //choose the smallest side of the container\n    if(elHeight < elWidth && elHeight != 0) {\n      elWidth = elHeight;\n    }\n    else if(elWidth != 0) {\n      elHeight = elWidth;\n    }\n    var width = opts.width || elWidth || 320;\n    var height = opts.height || elHeight || 320;\n    // Calculate layout variables\n    var padding = opts.padding + 2 || 6,\n        borderWidth = opts.borderWidth || 0,\n        markerRadius = opts.markerRadius || 8,\n        sliderMargin = opts.sliderMargin || 24,\n        sliderHeight = opts.sliderHeight || markerRadius * 2 + padding * 2 + borderWidth * 2,\n        bodyWidth = Math.min(height - sliderHeight - sliderMargin, width),\n        wheelRadius = bodyWidth / 2 - borderWidth,\n        leftMargin = (width - bodyWidth) / 2;\n    var marker = {\n      r: markerRadius\n    };\n    var borderStyles = {\n      w: borderWidth,\n      color: opts.borderColor || \"#fff\",\n    };\n\n    // Create UI elements\n    this.el = el;\n    this.svg = new svg(el, width, height, opts.display);\n    this.ui = [\n      new wheel(this.svg, {\n        cX: leftMargin + bodyWidth / 2,\n        cY: bodyWidth / 2,\n        r: wheelRadius,\n        rMax: wheelRadius - (markerRadius + padding),\n        marker: marker,\n        border: borderStyles,\n        lightness: opts.wheelLightness == undefined ? true : opts.wheelLightness,\n        anticlockwise: opts.anticlockwise\n      }),\n      new slider(this.svg, {\n        sliderType: \"v\",\n        x: leftMargin + borderWidth,\n        y: bodyWidth + sliderMargin,\n        w: bodyWidth - borderWidth * 2,\n        h: sliderHeight - borderWidth * 2,\n        r: sliderHeight / 2 - borderWidth,\n        marker: marker,\n        border: borderStyles\n      })\n    ];\n    // Create an iroStyleSheet for this colorWheel's CSS overrides\n    this.stylesheet = new iroStyleSheet();\n    // Create an iroColor to store this colorWheel's selected color\n    this.color = new iroColor();\n    // Whenever the selected color changes, trigger a colorWheel update too\n    this.color._onChange = this._update.bind(this);\n    this.color.set(opts.color || opts.defaultValue || \"#fff\")\n    // Hacky workaround for a couple of Safari SVG url bugs\n    // See https://github.com/jaames/iro.js/issues/18\n    // TODO: perhaps make this a seperate plugin, it's hacky and takes up more space than I'm happy with\n    this.on(\"history:stateChange\", (base) => {this.svg.updateUrls(base)});\n    // Listen to events\n    listen(this.svg.el, [EVENT_MOUSEDOWN, EVENT_TOUCHSTART], this, { passive:false });\n    this.emit(\"mount\", this);\n  }\n\n  /**\n    * @desc update the selected color\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - booleans for each HSV channel: true if the new value is different to the old value, else false\n    * @access protected\n  */\n  _update(color, changes) {\n    var rgb = color.rgbString;\n    var css = this.css;\n    // Loop through each UI element and update it\n    for (var i = 0; i < this.ui.length; i++) {\n      this.ui[i].update(color, changes); \n    }\n    // Update the stylesheet too\n    for (var selector in css) {\n      var properties = css[selector];\n      for (var prop in properties) {\n        this.stylesheet.setRule(selector, prop, rgb);\n      }\n    } \n    // Prevent infinite loops if the color is set inside a `color:change` callback\n    if (!this._colorChangeActive) {\n      // While _colorChangeActive = true, this event cannot be fired\n      this._colorChangeActive = true;\n      this.emit(\"color:change\", color, changes);\n      this._colorChangeActive = false;\n    }\n  }\n\n  /**\n    * @desc Set a callback function for an event\n    * @param {String} eventType Name of the event to listen to, pass \"*\" to listen to all events\n    * @param {Function} callback Event callback\n  */\n  on(eventType, callback) {\n    var events = this._events;\n    (events[eventType] || (events[eventType] = [])).push(callback);\n  }\n\n  /**\n    * @desc Remove a callback function for an event added with on()\n    * @param {String} eventType The name of the event\n    * @param {Function} callback The watch callback to remove from the event\n  */\n  off(eventType, callback) {\n    var eventList = this._events[eventType];\n    if (eventList) eventList.splice(eventList.indexOf(callback), 1);\n  }\n\n  /**\n    * @desc Emit an event\n    * @param {String} eventType The name of the event to emit\n    * @param {Array} args array of args to pass to callbacks\n  */\n  emit(eventType, ...args) {\n    var events = this._events,\n        callbackList = (events[eventType] || []).concat((events[\"*\"] || []));\n    for (var i = 0; i < callbackList.length; i++) {\n      callbackList[i].apply(null, args); \n    }\n  }\n\n  /**\n    * @desc DOM event handler\n    * @param {Event} e DOM event (currently either mouse or touch events)\n  */\n  handleEvent(e) {\n    // Detect if the event is a touch event by checking if it has the `touches` property\n    // If it is a touch event, use the first touch input\n    var point = e.touches ? e.changedTouches[0] : e,\n        // Get the screen position of the UI\n        rect = this.svg.el.getBoundingClientRect(),\n        // Convert the screen-space pointer position to local-space\n        x = point.clientX - rect.left,\n        y = point.clientY - rect.top;\n        \n    switch (e.type) {\n      case EVENT_MOUSEDOWN:\n      case EVENT_TOUCHSTART:\n        // Loop through each UI element and check if the point \"hits\" it\n        for (var i = 0; i < this.ui.length; i++) {\n          var uiElement = this.ui[i];\n          // If the element is hit, this means the user has clicked the element and is trying to interact with it\n          if (uiElement.checkHit(x, y)) {\n            // Set an internal reference to the uiElement being interacted with, for other internal event handlers\n            this._mouseTarget = uiElement;\n            // Attach event listeners\n            listen(document, [EVENT_MOUSEMOVE, EVENT_TOUCHMOVE, EVENT_MOUSEUP, EVENT_TOUCHEND], this, { passive:false });\n            // Emit input start event\n            this.emit(\"input:start\", this.color);\n            // Finally, use the position to update the picked color\n            this.color.hsv = this._mouseTarget.input(x, y);\n          }\n        }\n        break;\n      case EVENT_MOUSEMOVE:\n      case EVENT_TOUCHMOVE:\n        // Use the position to update the picker color\n        this.color.hsv = this._mouseTarget.input(x, y);\n        break;\n      case EVENT_MOUSEUP:\n      case EVENT_TOUCHEND:\n        this._mouseTarget = false;\n        this.emit(\"input:end\", this.color);\n        unlisten(document, [EVENT_MOUSEMOVE, EVENT_TOUCHMOVE, EVENT_MOUSEUP, EVENT_TOUCHEND], this);\n        break;\n    }\n    if (this._mouseTarget) {\n      e.preventDefault();\n    }\n  }\n}","import colorPicker from \"modules/colorPicker\";\nimport color from \"modules/color\";\nimport stylesheet from \"modules/stylesheet\";\n\nexport default {\n  Color: color,\n  ColorPicker: colorPicker,\n  Stylesheet: stylesheet,\n  version: process.env.VERSION,\n};\n"],"names":["marker","constructor","svg","opts","baseGroup","g","circle","r","CLASS_PREFIX","move","x","y","setTransform","PI","Math","sqrt","abs","round","wheel","_opts","type","cY","cX","border","w","color","ringGroup","hue","arc","anticlockwise","setGradient","gradient","_lightness","update","changes","this","hsv","v","lightness","setAttrs","toFixed","h","s","hueAngle","dist","rMax","cos","sin","input","angle","atan2","_y","_x","min","rangeMax","checkHit","dx","dy","floor","getColor","value","clamp","max","compareObjs","a","b","key","_onChange","_value","undefined","set","mix","color1","color2","weight","rgb1","rgb","rgb2","lighten","amount","col","darken","hsv2Rgb","i","f","p","q","t","rgb2Hsv","delta","hsv2Hsl","l","hsl2Hsv","hsl","hsl2Str","rgb2Str","rgb2Hex","str","toString","padStart","parseHexStr","hex","replace","int","parseInt","length","isShorthand","bitLength","bitMask","multiplier","prototypeAccessors","newValue","oldValue","channel","hasOwnProperty","rgbString","hexString","hslString","test","setChannel","model","clone","compare","slider","range","sliderType","radius","borderWidth","rect","insert","_gradient","iroColor","stops","percent","GRADIENT_INDEX","SVG_ATTRIBUTE_SHORTHANDS","class","stroke","strokeWidth","fill","opacity","offset","stopColor","stopOpacity","SVG_TRANSFORM_SHORTHANDS","translate","scale","rotate","ua","window","navigator","userAgent","toLowerCase","IS_IE","IS_SAFARI","svgElement","root","parent","attrs","el","document","createElementNS","appendChild","_root","_svgTransforms","_transformList","transform","baseVal","cx","cy","startAngle","endAngle","largeArcFlag","x1","d","y1","x2","y2","join","args","svgTransforms","createSVGTransform","appendItem","apply","attr","name","setAttribute","getUrl","_refs","svgGradient","stopElements","_defs","stop","push","base","location","protocol","host","pathname","id","svgRoot","width","height","display","style","_gradients","updateUrls","gradients","stylesheet","createElement","head","createTextNode","sheet","rules","cssRules","map","enabled","disabled","css","ret","selector","ruleSet","property","getPropertyValue","setRule","$1","setProperty","index","declaration","insertRule","e","addRule","const","EVENT_READYSTATE_CHANGE","READYSTATE_COMPLETE","listen","eventList","callback","params","addEventListener","unlisten","removeEventListener","colorPicker","_events","_mouseTarget","_colorChangeActive","styles","_mount","readyState","stateChange","querySelector","elWidth","getComputedStyle","elHeight","padding","markerRadius","sliderMargin","sliderHeight","bodyWidth","borderStyles","borderColor","ui","leftMargin","wheelRadius","wheelLightness","iroStyleSheet","_update","bind","defaultValue","on","emit","properties","prop","eventType","events","off","splice","indexOf","concat","callbackList","handleEvent","point","touches","changedTouches","getBoundingClientRect","clientX","left","clientY","top","uiElement","preventDefault","Color","ColorPicker","Stylesheet","version","process"],"mappings":"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"}